/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.online.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.online.model.App;
import com.liferay.online.model.AppModel;
import com.liferay.online.model.AppSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the App service. Represents a row in the &quot;online_App&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AppModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AppImpl}.
 * </p>
 *
 * @author pisw
 * @see AppImpl
 * @see App
 * @see AppModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class AppModelImpl extends BaseModelImpl<App> implements AppModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a app model instance should use the {@link App} interface instead.
	 */
	public static final String TABLE_NAME = "online_App";
	public static final Object[][] TABLE_COLUMNS = {
			{ "onlineAppId", Types.BIGINT },
			{ "appName", Types.VARCHAR },
			{ "appBody", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "appDescription", Types.VARCHAR },
			{ "appLanguage", Types.VARCHAR },
			{ "release_", Types.VARCHAR },
			{ "live", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("onlineAppId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("appName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appBody", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("appDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appLanguage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("release_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("live", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table online_App (onlineAppId LONG not null primary key,appName VARCHAR(75) null,appBody STRING null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,appDescription VARCHAR(75) null,appLanguage VARCHAR(75) null,release_ VARCHAR(75) null,live BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table online_App";
	public static final String ORDER_BY_JPQL = " ORDER BY app.onlineAppId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY online_App.onlineAppId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.online.model.App"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.online.model.App"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.online.model.App"),
			true);
	public static final long APPLANGUAGE_COLUMN_BITMASK = 1L;
	public static final long APPNAME_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long ONLINEAPPID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static App toModel(AppSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		App model = new AppImpl();

		model.setOnlineAppId(soapModel.getOnlineAppId());
		model.setAppName(soapModel.getAppName());
		model.setAppBody(soapModel.getAppBody());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setAppDescription(soapModel.getAppDescription());
		model.setAppLanguage(soapModel.getAppLanguage());
		model.setRelease(soapModel.getRelease());
		model.setLive(soapModel.getLive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<App> toModels(AppSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<App> models = new ArrayList<App>(soapModels.length);

		for (AppSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.online.model.App"));

	public AppModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _onlineAppId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOnlineAppId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _onlineAppId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return App.class;
	}

	@Override
	public String getModelClassName() {
		return App.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("onlineAppId", getOnlineAppId());
		attributes.put("appName", getAppName());
		attributes.put("appBody", getAppBody());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("appDescription", getAppDescription());
		attributes.put("appLanguage", getAppLanguage());
		attributes.put("release", getRelease());
		attributes.put("live", getLive());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long onlineAppId = (Long)attributes.get("onlineAppId");

		if (onlineAppId != null) {
			setOnlineAppId(onlineAppId);
		}

		String appName = (String)attributes.get("appName");

		if (appName != null) {
			setAppName(appName);
		}

		String appBody = (String)attributes.get("appBody");

		if (appBody != null) {
			setAppBody(appBody);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String appDescription = (String)attributes.get("appDescription");

		if (appDescription != null) {
			setAppDescription(appDescription);
		}

		String appLanguage = (String)attributes.get("appLanguage");

		if (appLanguage != null) {
			setAppLanguage(appLanguage);
		}

		String release = (String)attributes.get("release");

		if (release != null) {
			setRelease(release);
		}

		Boolean live = (Boolean)attributes.get("live");

		if (live != null) {
			setLive(live);
		}
	}

	@JSON
	@Override
	public long getOnlineAppId() {
		return _onlineAppId;
	}

	@Override
	public void setOnlineAppId(long onlineAppId) {
		_onlineAppId = onlineAppId;
	}

	@JSON
	@Override
	public String getAppName() {
		if (_appName == null) {
			return StringPool.BLANK;
		}
		else {
			return _appName;
		}
	}

	@Override
	public void setAppName(String appName) {
		_columnBitmask |= APPNAME_COLUMN_BITMASK;

		if (_originalAppName == null) {
			_originalAppName = _appName;
		}

		_appName = appName;
	}

	public String getOriginalAppName() {
		return GetterUtil.getString(_originalAppName);
	}

	@JSON
	@Override
	public String getAppBody() {
		if (_appBody == null) {
			return StringPool.BLANK;
		}
		else {
			return _appBody;
		}
	}

	@Override
	public void setAppBody(String appBody) {
		_appBody = appBody;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getAppDescription() {
		if (_appDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _appDescription;
		}
	}

	@Override
	public void setAppDescription(String appDescription) {
		_appDescription = appDescription;
	}

	@JSON
	@Override
	public String getAppLanguage() {
		if (_appLanguage == null) {
			return StringPool.BLANK;
		}
		else {
			return _appLanguage;
		}
	}

	@Override
	public void setAppLanguage(String appLanguage) {
		_columnBitmask |= APPLANGUAGE_COLUMN_BITMASK;

		if (_originalAppLanguage == null) {
			_originalAppLanguage = _appLanguage;
		}

		_appLanguage = appLanguage;
	}

	public String getOriginalAppLanguage() {
		return GetterUtil.getString(_originalAppLanguage);
	}

	@JSON
	@Override
	public String getRelease() {
		if (_release == null) {
			return StringPool.BLANK;
		}
		else {
			return _release;
		}
	}

	@Override
	public void setRelease(String release) {
		_release = release;
	}

	@JSON
	@Override
	public boolean getLive() {
		return _live;
	}

	@Override
	public boolean isLive() {
		return _live;
	}

	@Override
	public void setLive(boolean live) {
		_live = live;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			App.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public App toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (App)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AppImpl appImpl = new AppImpl();

		appImpl.setOnlineAppId(getOnlineAppId());
		appImpl.setAppName(getAppName());
		appImpl.setAppBody(getAppBody());
		appImpl.setGroupId(getGroupId());
		appImpl.setCompanyId(getCompanyId());
		appImpl.setUserId(getUserId());
		appImpl.setUserName(getUserName());
		appImpl.setCreateDate(getCreateDate());
		appImpl.setModifiedDate(getModifiedDate());
		appImpl.setAppDescription(getAppDescription());
		appImpl.setAppLanguage(getAppLanguage());
		appImpl.setRelease(getRelease());
		appImpl.setLive(getLive());

		appImpl.resetOriginalValues();

		return appImpl;
	}

	@Override
	public int compareTo(App app) {
		long primaryKey = app.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof App)) {
			return false;
		}

		App app = (App)obj;

		long primaryKey = app.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AppModelImpl appModelImpl = this;

		appModelImpl._originalAppName = appModelImpl._appName;

		appModelImpl._originalGroupId = appModelImpl._groupId;

		appModelImpl._setOriginalGroupId = false;

		appModelImpl._setModifiedDate = false;

		appModelImpl._originalAppLanguage = appModelImpl._appLanguage;

		appModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<App> toCacheModel() {
		AppCacheModel appCacheModel = new AppCacheModel();

		appCacheModel.onlineAppId = getOnlineAppId();

		appCacheModel.appName = getAppName();

		String appName = appCacheModel.appName;

		if ((appName != null) && (appName.length() == 0)) {
			appCacheModel.appName = null;
		}

		appCacheModel.appBody = getAppBody();

		String appBody = appCacheModel.appBody;

		if ((appBody != null) && (appBody.length() == 0)) {
			appCacheModel.appBody = null;
		}

		appCacheModel.groupId = getGroupId();

		appCacheModel.companyId = getCompanyId();

		appCacheModel.userId = getUserId();

		appCacheModel.userName = getUserName();

		String userName = appCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			appCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			appCacheModel.createDate = createDate.getTime();
		}
		else {
			appCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			appCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			appCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		appCacheModel.appDescription = getAppDescription();

		String appDescription = appCacheModel.appDescription;

		if ((appDescription != null) && (appDescription.length() == 0)) {
			appCacheModel.appDescription = null;
		}

		appCacheModel.appLanguage = getAppLanguage();

		String appLanguage = appCacheModel.appLanguage;

		if ((appLanguage != null) && (appLanguage.length() == 0)) {
			appCacheModel.appLanguage = null;
		}

		appCacheModel.release = getRelease();

		String release = appCacheModel.release;

		if ((release != null) && (release.length() == 0)) {
			appCacheModel.release = null;
		}

		appCacheModel.live = getLive();

		return appCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{onlineAppId=");
		sb.append(getOnlineAppId());
		sb.append(", appName=");
		sb.append(getAppName());
		sb.append(", appBody=");
		sb.append(getAppBody());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", appDescription=");
		sb.append(getAppDescription());
		sb.append(", appLanguage=");
		sb.append(getAppLanguage());
		sb.append(", release=");
		sb.append(getRelease());
		sb.append(", live=");
		sb.append(getLive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.liferay.online.model.App");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>onlineAppId</column-name><column-value><![CDATA[");
		sb.append(getOnlineAppId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appName</column-name><column-value><![CDATA[");
		sb.append(getAppName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appBody</column-name><column-value><![CDATA[");
		sb.append(getAppBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appDescription</column-name><column-value><![CDATA[");
		sb.append(getAppDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appLanguage</column-name><column-value><![CDATA[");
		sb.append(getAppLanguage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>release</column-name><column-value><![CDATA[");
		sb.append(getRelease());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>live</column-name><column-value><![CDATA[");
		sb.append(getLive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = App.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			App.class
		};
	private long _onlineAppId;
	private String _appName;
	private String _originalAppName;
	private String _appBody;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _appDescription;
	private String _appLanguage;
	private String _originalAppLanguage;
	private String _release;
	private boolean _live;
	private long _columnBitmask;
	private App _escapedModel;
}